/*--------------------------------------------------------------------------------------
 Ethanon Engine (C) Copyright 2008-2013 Andre Santee
 http://ethanonengine.com/

	Permission is hereby granted, free of charge, to any person obtaining a copy of this
	software and associated documentation files (the "Software"), to deal in the
	Software without restriction, including without limitation the rights to use, copy,
	modify, merge, publish, distribute, sublicense, and/or sell copies of the Software,
	and to permit persons to whom the Software is furnished to do so, subject to the
	following conditions:

	The above copyright notice and this permission notice shall be included in all
	copies or substantial portions of the Software.

	THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
	INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
	PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
	HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF
	CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE
	OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
--------------------------------------------------------------------------------------*/

void main(float2 texCoord : TEXCOORD0,
		  float3 pixelPos3D : TEXCOORD1,
		  float4 color0   : COLOR0,
		  out float4 oColor : COLOR,
		  uniform sampler2D diffuse,
		  uniform sampler2D normalMap,
		  uniform sampler2D glossMap,
		  uniform float specularPower,
		  uniform float3 lightPos,
		  uniform float squaredRange,
		  uniform float4 lightColor,
		  uniform float3 fakeEyePos,
		  uniform float specularBrightness)
{
	const float4 diffuseColor = tex2D(diffuse, texCoord);
	float3 normalColor = tex2D(normalMap, texCoord);
	const float4 glossColor = tex2D(glossMap, texCoord)*specularBrightness;

	const float3 lightVec  = pixelPos3D-lightPos;
	const float3 eyeVec  = pixelPos3D-fakeEyePos;
	
	const float lightVecLength  = length(lightVec);
	const float eyeVecLength  = length(eyeVec);
	const float3 halfVec = normalize(lightVec/lightVecLength+eyeVec/eyeVecLength);
	lightColor.a = 1.0f;

	normalColor = -normalize(2*(normalColor-0.5));
	normalColor = normalColor.xzy;
	normalColor.z *=-1;

	float diffuseLight = dot(lightVec/lightVecLength, (normalColor));

	float squaredDist = dot(lightVec,lightVec);

	squaredRange = max(squaredDist, squaredRange);
	const float attenBias = 1-(squaredDist/squaredRange);

	const float4 specular = lightColor*pow(saturate(dot(normalColor, halfVec)), specularPower);

	oColor = ((diffuseColor*color0*diffuseLight*lightColor)+specular*diffuseColor.w*glossColor)*attenBias;
}
