/*--------------------------------------------------------------------------------------
 Ethanon Engine (C) Copyright 2008-2013 Andre Santee
 http://ethanonengine.com/

	Permission is hereby granted, free of charge, to any person obtaining a copy of this
	software and associated documentation files (the "Software"), to deal in the
	Software without restriction, including without limitation the rights to use, copy,
	modify, merge, publish, distribute, sublicense, and/or sell copies of the Software,
	and to permit persons to whom the Software is furnished to do so, subject to the
	following conditions:

	The above copyright notice and this permission notice shall be included in all
	copies or substantial portions of the Software.

	THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
	INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
	PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
	HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF
	CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE
	OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
--------------------------------------------------------------------------------------*/

// sprite and screen properties
uniform float4x4 viewMatrix;
uniform float4x4 rotationMatrix;
uniform float2 screenSize;
uniform float2 size;
uniform float2 entityPos;
uniform float2 center;
uniform float2 bitmapSize;
uniform float2 rectPos;
uniform float2 rectSize;
uniform float2 scroll;
uniform float2 multiply;
uniform float4 color0;
uniform float4 color1;
uniform float4 color2;
uniform float4 color3;
uniform float2 flipAdd;
uniform float2 flipMul;
uniform float2 cameraPos;
uniform float depth;

uniform float3 parallaxOrigin_verticalIntensity;
uniform float parallaxIntensity;
uniform float3 entityPos3D;





float2 computeParallaxOffset(const float2 vertPos)
{
	const float2 parallaxOrigin = parallaxOrigin_verticalIntensity.xy;
	return ((vertPos - parallaxOrigin) / screenSize.x) * entityPos3D.z * parallaxIntensity;
}

struct SPRITE_TRANSFORM
{
	float4 position;
	float2 vertPos;
};
SPRITE_TRANSFORM transformSprite_ppl(float3 position)
{
	SPRITE_TRANSFORM r;
	float4 newPos = float4(position, 1);
	newPos = newPos * float4(size,1,1) - float4(center, 0, 0);
	newPos = mul(rotationMatrix, newPos) + float4(entityPos,0,0);
	r.vertPos = newPos.xy / screenSize;

	// project the vertex on the screen
	newPos -= float4(cameraPos,0,0);
	newPos += float4(computeParallaxOffset(newPos),0,0) - float4(screenSize / 2,0,0);
	newPos *= float4(1,-1,1,1);
	r.position = mul(viewMatrix, newPos);
	return r;
}

// returns the texture coordinate according to the rect
float2 transformCoord(float2 texCoord)
{
	float2 newCoord = texCoord * (rectSize / bitmapSize);
	newCoord += (rectPos / bitmapSize);
	return (newCoord + (scroll / bitmapSize)) * multiply;
}

void main(float3 position : POSITION,
			float2 texCoord : TEXCOORD0,
			out float4 oPosition : POSITION,
			out float4 oColor    : COLOR0,
			out float2 oTexCoord : TEXCOORD0,
			out float3 oVertPos3D : TEXCOORD1,
			uniform float3 topLeft3DPos)
			
{
	SPRITE_TRANSFORM transform = transformSprite_ppl(position);

	transform.position.z = 1 - depth;

	oPosition = transform.position;
	oVertPos3D = topLeft3DPos + (position * float3(size,1));
	oTexCoord = transformCoord(texCoord);
	oColor = color0;
}
